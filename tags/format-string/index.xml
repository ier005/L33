<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>format-string on L33'</title><link>https://blog.usec.cc/tags/format-string/</link><description>Recent content in format-string on L33'</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Sat, 30 Dec 2017 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.usec.cc/tags/format-string/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploit-exercises Protostar-Format-string</title><link>https://blog.usec.cc/posts/security/misc/exploit-exercises-protostar-format-string/</link><pubDate>Sat, 30 Dec 2017 00:00:00 +0800</pubDate><guid>https://blog.usec.cc/posts/security/misc/exploit-exercises-protostar-format-string/</guid><description>Format 0 源码： #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; void vuln(char *string) { volatile int target; char buffer[64]; target = 0; sprintf(buffer, string); if(target == 0xdeadbeef) { printf(&amp;#34;you have hit the target correctly :)\n&amp;#34;); } } int main(int argc, char **argv) { vuln(argv[1]); } 此题的基本原理仍然是栈溢出，但是题目中要求输入字符不多于10个，所以就要利用格式化字符串中的宽度，覆盖掉target的值： Format 1 源码: #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int target; void vuln(char *string) { printf(string); if(target) { printf(&amp;#34;you have modified the target :)\n&amp;#34;); } } int main(int argc, char **argv) { vuln(argv[1]);</description></item><item><title>格式化字符串漏洞</title><link>https://blog.usec.cc/posts/security/reverse/format-string/</link><pubDate>Tue, 21 Nov 2017 00:00:00 +0800</pubDate><guid>https://blog.usec.cc/posts/security/reverse/format-string/</guid><description>文章内容参考来源：CTF-All-In-One 格式化输出函数和格式化字符串 首先介绍一下C语言中的格式化输出函数及格式化字符串的格式。 格式化输出函数 C 标准中定义了下面的格式化输出函数（参考 man ３ printf）： #include &amp;lt;stdio.h&amp;gt; int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, ...); int sprintf(char *str, const char *format, ...); int snprintf(char *str, size_t size, const char *format, ...);</description></item></channel></rss>